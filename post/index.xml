<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | 1by2</title>
    <link>https://1by2.github.io/post/</link>
      <atom:link href="https://1by2.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© 2020 1by2.ALL RIGHTS RESERVED</copyright><lastBuildDate>Thu, 04 Jun 2020 20:55:46 +0530</lastBuildDate>
    <image>
      <url>https://1by2.github.io/images/icon_huf9bf6f6e13f354639431eeb48d0f0af0_35542_512x512_fill_lanczos_center_2.png</url>
      <title>Posts</title>
      <link>https://1by2.github.io/post/</link>
    </image>
    
    <item>
      <title>Introduction: Data lake</title>
      <link>https://1by2.github.io/post/data-engineering/data-lake/</link>
      <pubDate>Thu, 04 Jun 2020 20:55:46 +0530</pubDate>
      <guid>https://1by2.github.io/post/data-engineering/data-lake/</guid>
      <description>&lt;h1 id=&#34;data-lake&#34;&gt;Data Lake&lt;/h1&gt;
&lt;p&gt;A central place where all company&amp;rsquo;s raw data flows, rapidly.&lt;/p&gt;
&lt;p&gt;It is intended to be raw data - as close to the source as possible. It is still a good idea to capture the meta data and describe the data so that people can explore the lake and re-use what is available.&lt;/p&gt;
&lt;h1 id=&#34;data-lake-comprises-of-these-5-major-principles&#34;&gt;Data Lake comprises of these 5 major principles&lt;/h1&gt;
&lt;h2 id=&#34;ingest&#34;&gt;Ingest&lt;/h2&gt;
&lt;p&gt;Ability to &lt;code&gt;collect&lt;/code&gt; all data that business care about. Systems frequently ingest data through APIs and batch processing.&lt;/p&gt;
&lt;h2 id=&#34;store&#34;&gt;Store&lt;/h2&gt;
&lt;p&gt;Getting all data in one place and breaking down &lt;code&gt;data silos&lt;/code&gt;. The storage should be scalable that supports storing structured, unstructured, and semistructured data.&lt;/p&gt;
&lt;h2 id=&#34;analyze&#34;&gt;Analyze&lt;/h2&gt;
&lt;p&gt;Matching correct data point and having correct systems and &lt;code&gt;finding relations&lt;/code&gt; between all data gathered. Schema is written at the time of analysis (schema on read)&lt;/p&gt;
&lt;h2 id=&#34;surface&#34;&gt;Surface&lt;/h2&gt;
&lt;p&gt;There needs to be a simple method to display all analysis. The &lt;code&gt;data&lt;/code&gt; need to be &lt;code&gt;understand&lt;/code&gt; here; the easier to see the result the easier to take actions.&lt;/p&gt;
&lt;h2 id=&#34;act&#34;&gt;Act&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&amp;quot;Make Me More Money&amp;quot;&lt;/code&gt;. A plan has to be put in place to take the results of data analysis and fit it into an operation business model.&lt;/p&gt;
&lt;h1 id=&#34;the-main-challenge-with-a-data-lake-architecture&#34;&gt;The main challenge with a data lake architecture&lt;/h1&gt;
&lt;p&gt;Raw data is stored with no oversight of the contents. For a data lake to make data usable, it needs to have defined mechanisms to catalog, and secure data. Without these elements, data cannot be found, or trusted resulting in a “data swamp.&amp;rdquo;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For those who are thinking that how &lt;a target=&#34;new&#34; href=&#34;https://1by2.github.io/post/data-engineering/data-warehouse/&#34;&gt;Data Warehouse&lt;/a&gt; is different from a Data Lake, well to put it succinctly, proving the value of data is the role of Data Lake and In Data Warehouse one&amp;rsquo;s valuable data resides which they use for reporting purposes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;which-one-to-use-data-lake-or-data-warehouse&#34;&gt;Which one to use Data Lake or Data Warehouse?&lt;/h1&gt;
&lt;p&gt;Big Data isn&amp;rsquo;t a singular term. Every architecture and every technology underline has their unique use case. So in other words use the best tool for the job.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introduction: Data warehouse</title>
      <link>https://1by2.github.io/post/data-engineering/data-warehouse/</link>
      <pubDate>Thu, 04 Jun 2020 19:29:29 +0530</pubDate>
      <guid>https://1by2.github.io/post/data-engineering/data-warehouse/</guid>
      <description>&lt;h1 id=&#34;data-warehouse&#34;&gt;Data Warehouse&lt;/h1&gt;
&lt;p&gt;A central repository of information that can be analyzed to make informed decisions. Data flows into a data warehouse from transactional systems, relational databases, and other sources.&lt;/p&gt;
&lt;h1 id=&#34;the-core-architecture-boils-down-to-some--&#34;&gt;The core architecture boils down to some -&lt;/h1&gt;
&lt;h2 id=&#34;pre-processing&#34;&gt;Pre-Processing&lt;/h2&gt;
&lt;p&gt;When data collection is from a number of different sources. Consistency in the format is essential before loading into a data warehouse.&lt;/p&gt;
&lt;h2 id=&#34;staging&#34;&gt;Staging&lt;/h2&gt;
&lt;p&gt;A holding area, where you put data after pre-processing (but not always) — and store it transiently until it’s processed further down the line. This is the last point where the data should be found in its raw form. (Amazon s3, Google Cloud Storage, etc are useful cloud products for staging area)&lt;/p&gt;
&lt;h2 id=&#34;master&#34;&gt;Master&lt;/h2&gt;
&lt;p&gt;The master area is where the incoming data takes some real shape.
The master schema should contain correctly modeled tables, that are appropriately named. Data Cleaning is mostly done here.&lt;/p&gt;
&lt;h2 id=&#34;reporting&#34;&gt;Reporting&lt;/h2&gt;
&lt;p&gt;Business analysts, data scientists, and decision-makers access the data through business intelligence (BI) tools, SQL clients, and other analytics applications. Businesses use reports, dashboards, and analytics tools to extract insights from their data, monitor business performance, and support decision making. These reports, dashboards, and analytics tools are powered by data warehouses. (To analyze data Amazon Redshift, Google Bigquery, etc are useful big data cloud products)&lt;/p&gt;
&lt;h2 id=&#34;key-points&#34;&gt;Key Points&lt;/h2&gt;
&lt;p&gt;Data Warehouse consists of highly curated data that serves as the central version of the truth, the data schema is designed prior DW implementation (schema-on-write). Used for batch reporting, business intelligence, and data visualization by business analyst.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Part 2 Generator: Python Coroutine</title>
      <link>https://1by2.github.io/post/python/generator2/</link>
      <pubDate>Thu, 28 May 2020 16:15:08 +0530</pubDate>
      <guid>https://1by2.github.io/post/python/generator2/</guid>
      <description>&lt;h3 id=&#34;if-you-dont-know-about-what-generator-is--please-have-a-look-at-a-hrefpostpythongeneratorthisa-post&#34;&gt;If you don&amp;rsquo;t know about What generator is ? Please have a look at &lt;a href=&#34;https://1by2.github.io/post/python/generator/&#34;&gt;this&lt;/a&gt; post.&lt;/h3&gt;
&lt;h1 id=&#34;lets-deep-dive&#34;&gt;Let’s, deep dive!&lt;/h1&gt;
&lt;h2 id=&#34;understanding-subroutine&#34;&gt;Understanding Subroutine&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;./subroutine.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;When the logic for a function with complex behavior is divided into several small steps that are themselves functions, these functions are called &lt;code&gt;helper functions&lt;/code&gt; or &lt;code&gt;subroutines&lt;/code&gt;. Subroutines are called by the main function that is responsible for coordinating the use of several subroutines.&lt;/p&gt;
&lt;h2 id=&#34;understanding-coroutine&#34;&gt;Understanding Coroutine&lt;/h2&gt;
&lt;p&gt;There is another approach for dividing or decomposing a complex program. In the above approach, we have only one entry point, the main function. Using &lt;code&gt;coroutines&lt;/code&gt; we will have one entry point but &lt;code&gt;multiple re-entry points&lt;/code&gt;. When using coroutines, there is no main function to coordinate results. Instead, coroutines themselves link together to form a &lt;code&gt;pipeline&lt;/code&gt;. There may be a coroutine for consuming the incoming data and sending it to other coroutines. There may be coroutines that each do simple processing steps on data sent to them, and there may finally be another coroutine that outputs a final result.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./coroutine.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Let’s explore how python supports building coroutines with the &lt;strong&gt;yield&lt;/strong&gt; and &lt;strong&gt;send()&lt;/strong&gt; statements.&lt;/p&gt;
&lt;p&gt;So far we have seen that python generator function &lt;strong&gt;yield&lt;/strong&gt; a value. But it can also consume a value using &lt;strong&gt;(yield)&lt;/strong&gt;. Apart from yield and next(), the generator object also have &lt;strong&gt;send()&lt;/strong&gt; and &lt;strong&gt;close()&lt;/strong&gt; functions.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&amp;gt;&amp;gt;&amp;gt; value = (yield)

&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;pep-342httpswwwpythonorgdevpepspep-0342-explains-the-exact-rules-which-are-that-a-yield-expression-must-always-be-parenthesized-except-when-it-occurs-at-the-top-level-expression-on-the-right-hand-side-of-an-assignment&#34;&gt;
&lt;a href=&#34;https://www.python.org/dev/peps/pep-0342&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PEP 342&lt;/a&gt; explains the exact rules, which are that a yield-expression must always be parenthesized except when it occurs at the top-level expression on the right-hand side of an assignment.&lt;/h6&gt;
&lt;p&gt;With this statement, execution pauses until the object&amp;rsquo;s send method is invoked with an argument&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&amp;gt;&amp;gt;&amp;gt; coroutine.send(data)

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, execution resumes, with the value being assigned to the value of data.&lt;/p&gt;
&lt;h3 id=&#34;lets-look-at-an-example-to-clarify-things-up&#34;&gt;Let’s look at an example to clarify things up:&lt;/h3&gt;
&lt;p&gt;We will design two functions. The first function &lt;code&gt;emit_word()&lt;/code&gt; will &lt;code&gt;produce&lt;/code&gt; words from the given input string and &lt;code&gt;emit/send&lt;/code&gt; our second function &lt;code&gt;pattern()&lt;/code&gt; will &lt;code&gt;consume&lt;/code&gt; the input word and will give the output if a pattern &lt;code&gt;p&lt;/code&gt; is in the &lt;code&gt;input word&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;consumer&#34;&gt;Consumer:&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Consumer
&amp;gt;&amp;gt;&amp;gt; def pattern(p):
        print(f&amp;quot;Searching for {p}&amp;quot;)
        try:
            while True:
                s = (yield)
                if p in s:
                    print(s)
        except GeneratorExit:
            print(&amp;quot;=== Completed ===&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;examining-the-consumer-functioin&#34;&gt;Examining the consumer functioin:&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&amp;gt;&amp;gt;&amp;gt; p = pattern(&amp;quot;apple&amp;quot;)
&amp;gt;&amp;gt;&amp;gt; next(p)
Seraching for apple
# The generator function will pause until send() is called.
&amp;gt;&amp;gt;&amp;gt; p.send(&amp;quot;An apple a day keeps the doctor away&amp;quot;)
An apple a day keeps the doctor away
&amp;gt;&amp;gt;&amp;gt; p.send(&amp;quot;A strawberry a day keeps the doctor away&amp;quot;)
&amp;gt;&amp;gt;&amp;gt; p.send(&amp;quot;My mom gave me an apple&amp;quot;)
My mom gave me an apple
&amp;gt;&amp;gt;&amp;gt; p.close()
===Completed===
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;producer&#34;&gt;Producer:&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#Producer
&amp;gt;&amp;gt;&amp;gt; def emit_word(string, match):
        for word in string.split():
	          match.send(word)
        match.close()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;examining-the-producer-functioin&#34;&gt;Examining the producer functioin:&lt;/h3&gt;
&lt;p&gt;For each word in a given string it emits/send the word to the consumer function&lt;/p&gt;
&lt;h3 id=&#34;joining-all-together&#34;&gt;Joining all together:&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; string = &amp;quot;Pen Pineapple apple pen&amp;quot;
&amp;gt;&amp;gt;&amp;gt; match = pattern(&amp;quot;apple&amp;quot;)
&amp;gt;&amp;gt;&amp;gt; next(match)
Seraching for apple
&amp;gt;&amp;gt;&amp;gt; emit_word(string, match)
Pineapple
apple
===Completed===
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;key-takeaways-generators&#34;&gt;Key takeaways: generators&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Generators produce values one-at-a-time as opposed to giving them all at once.&lt;/li&gt;
&lt;li&gt;There are two ways to create generators: generator functions and generator expressions.&lt;/li&gt;
&lt;li&gt;Generator functions yield, regular functions return.&lt;/li&gt;
&lt;li&gt;Generator expressions need (), list comprehensions use [].&lt;/li&gt;
&lt;li&gt;You can only use generator expressions once.&lt;/li&gt;
&lt;li&gt;There are two ways to get values from generators: the next() function and a for loop. The for loop is often the preferred method.&lt;/li&gt;
&lt;li&gt;We can use generators to read huge files to give us one line at a time. By not loading everything in memory at once.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Part 1 Generator: Introduction</title>
      <link>https://1by2.github.io/post/python/generator/</link>
      <pubDate>Thu, 28 May 2020 11:31:35 +0530</pubDate>
      <guid>https://1by2.github.io/post/python/generator/</guid>
      <description>&lt;h1 id=&#34;generator&#34;&gt;Generator&lt;/h1&gt;
&lt;p&gt;Before starting with what generators are, we’ll first discuss what iteration, iterables, and iterators are.&lt;/p&gt;
&lt;h2 id=&#34;iteration&#34;&gt;Iteration&lt;/h2&gt;
&lt;p&gt;Iteration is a term for taking each item of something, one after another. Any time you use a loop, explicit or implicit, to go over a group of items, that is iteration.&lt;/p&gt;
&lt;h2 id=&#34;iterable&#34;&gt;Iterable&lt;/h2&gt;
&lt;p&gt;Iterable is an object that is, well, iterable, which simply means that it can be used in iteration, e.g. with a for loop. How? By using an iterator. I&amp;rsquo;ll explain it below.
Iterable objects also define &lt;code&gt;__iter__&lt;/code&gt; that returns an iterator, and also have a &lt;code&gt;__getitem__&lt;/code&gt; method suitable for indexed lookup. Examples of iterables include lists, tuples, and strings - any such sequence that can be iterated over a loop.&lt;/p&gt;
&lt;h2 id=&#34;iterator&#34;&gt;Iterator&lt;/h2&gt;
&lt;p&gt;Iterator is an object that defines how to actually do the iteration, specifically what is the next element. That&amp;rsquo;s why it must have the &lt;code&gt;next()&lt;/code&gt; method. It remembers where it is during iteration.&lt;/p&gt;
&lt;h3 id=&#34;lets-look-an-example-to-clarify-things-up&#34;&gt;Let’s look an example to clarify things up:&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; # ranks is an iterable
&amp;gt;&amp;gt;&amp;gt; ranks = [1,2,3]

&amp;gt;&amp;gt;&amp;gt; # Returns True ranks has __iter__ method
&amp;gt;&amp;gt;&amp;gt; __iter__ in dir(ranks)
True
&amp;gt;&amp;gt;&amp;gt; # Returns True ranks has __getitem__ method
&amp;gt;&amp;gt;&amp;gt; __getitem__ in dir(ranks)
True

&amp;gt;&amp;gt;&amp;gt; # ranks is now an iterator
&amp;gt;&amp;gt;&amp;gt; ranks = iter(ranks)
&amp;gt;&amp;gt;&amp;gt; # Retuns True ranks has __next__ method
&amp;gt;&amp;gt;&amp;gt; __next__ in dir(ranks)
True
&amp;gt;&amp;gt;&amp;gt; next(ranks)
1
&amp;gt;&amp;gt;&amp;gt; next(ranks)
2
&amp;gt;&amp;gt;&amp;gt; next(ranks)
3
&amp;gt;&amp;gt;&amp;gt; # next() raises StopIteration, to signal that iteration is complete
&amp;gt;&amp;gt;&amp;gt; next(ranks)
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
StopIteration
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Whenever we use a &lt;code&gt;for&lt;/code&gt; loop, or &lt;code&gt;map&lt;/code&gt;, or a &lt;code&gt;list comprehension&lt;/code&gt;, etc. in Python, the next method is called automatically to get each item from the iterator, thus going through the process of iteration.&lt;/p&gt;
&lt;p&gt;With our knowledge of iterators, we can implement the evaluation rule of a &lt;code&gt;for&lt;/code&gt; statement in terms of while, assignment, and try statements.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; i = ranks.__iter__() # or iter(ranks)
&amp;gt;&amp;gt;&amp;gt; try:
        while True:
            item = i.__next__() # or next(i)
            print(item)
    except StopIteration:
        pass
1
2
3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the above example if we want to keep track of our iteration we need to introduce a new field &lt;code&gt;current&lt;/code&gt; to keep track of progress through the sequence. With simple sequences like one shown above, this can be done easily. With complex sequences, however, it can be quite difficult for the &lt;code&gt;next()&lt;/code&gt; function to save its place in the calculation. Hence, comes &lt;code&gt;generators&lt;/code&gt; allowing us to define more complicated iterations.&lt;/p&gt;
&lt;h2 id=&#34;what-is-a-generator&#34;&gt;What is a generator?&lt;/h2&gt;
&lt;p&gt;A generator is an iterator returned by a special class of function called a generator function. Generator functions are distinguished from regular functions in that rather than containing return statements in their body, they use yield statement to return elements of a series.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&amp;gt;&amp;gt;&amp;gt; def countdown(n): 
        while n &amp;gt; 0: 
            yield n 
            n -= 1 
&amp;gt;&amp;gt;&amp;gt; for i in countdown(5):
        print(i, end=&#39; &#39;)

5 4 3 2 1

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Above, the behavior is different from normal functions. Calling a generator function creates a generator object.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&amp;gt;&amp;gt;&amp;gt; def countdown(n): 
        while n &amp;gt; 0: 
            yield n 
            n -= 1 
&amp;gt;&amp;gt;&amp;gt; c = countdown(5)
&amp;lt;generator object countdown at 0x0000017CD6788360&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;The function only executes on next()&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&amp;gt;&amp;gt;&amp;gt; next(c)
5
&amp;gt;&amp;gt; &amp;gt;next(c)
4
# and so on until next() raises StopIteration

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A generator is kinda different from objects that support iteration. We can iterate over the generated data once, but if we want to do it again, we have to call the generator function again (resetting generator).&lt;/p&gt;
&lt;p&gt;Like list comprehensions, generators also support concise notions for such operations. Using &lt;code&gt;‘()’ &lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; gen = (expression for i in s if condition)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: In the above countdown example it doesn’t start running the function. It only computes when we request for data (The technical term for this behavior is &lt;code&gt;lazy evaluation&lt;/code&gt;). Therefore not loading everything at once in in-memory is a useful perk of generators that we can exploit while dealing with a &lt;code&gt;huge amount of data&lt;/code&gt;. We can model sequences with &lt;code&gt;no definite&lt;/code&gt; end using generators&lt;/p&gt;
&lt;h3 id=&#34;below-is-an-example-of-an-infinite-sequence-of-even-numbers&#34;&gt;Below is an example of an &lt;code&gt;infinite&lt;/code&gt; sequence of even numbers&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def infinte_range(step):
        i = 0
        while True:
            yield i
            i += step
&amp;gt;&amp;gt;&amp;gt; even_numbers = (x for x in infinte_range(2))
&amp;gt;&amp;gt;&amp;gt; next(even_numbers)
0
&amp;gt;&amp;gt;&amp;gt; next(even_numbers)
2
&amp;gt;&amp;gt;&amp;gt; next(even_numbers)
4
&amp;gt;&amp;gt;&amp;gt; next(even_numbers)
6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://1by2.github.io/post/python/generator2/&#34;&gt;To be continued&amp;hellip;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
